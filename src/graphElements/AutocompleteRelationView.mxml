<?xml version="1.0" encoding="utf-8"?>

<!-- 
Copyright (C) 2009 Philipp Heim and Timo Stegemann (email to: heim.philipp@googlemail.com)

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses/>.	
-->

<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="http://code.google.com/p/flexlib/" 
	xmlns:local="*" 
	xmlns:combo="de.sbistram.controls.*"
	creationComplete="setup()"
	filters="{calcFilters(data.hasChanged)}"
	> <!--color="{getColor(app().sGraph.currentItem, data as Item)}" -->
		
	<mx:Style>
		.myToggleButtonStyle {
			fontSize: 9;
			fontWeight: middle;
			padding-top:0;
			padding-bottom:0;
			padding-right:0;
			padding-left:0;
        }
		
		.chainItemStyle {
			fontWeight: middle;
			color: #3f3f3f;
			fontSize: 10;
		}  
	</mx:Style> <!-- fontSize: 9 -->
	
    <mx:transitions>
       <mx:Transition id="toFixedRelation" fromState="" toState="FixedRelation">
             
            <mx:Parallel targets="{[myVBox]}">
                <mx:Resize duration="500" easingFunction="Bounce.easeOut" effectEnd="{}" />
            </mx:Parallel>
			
        </mx:Transition>
    </mx:transitions>
	
    <mx:states>
        <mx:State name="FixedRelation" basedOn="">
			<mx:RemoveChild target="{addRelation}"/>
			<mx:AddChild relativeTo="{myVBox}" position="lastChild" creationPolicy="all">
				<mx:target>
					<mx:Label text="{data.rLabel}" maxWidth="80" toolTip="{data.property.label}" styleName="chainItemStyle" />
				</mx:target>
            </mx:AddChild>
			<!--<mx:SetStyle target="{myVBox}" name="borderThickness" value="1"/>-->
			<mx:SetStyle target="{myVBox}" name="paddingLeft" value="0"/>
			<mx:SetStyle target="{myVBox}" name="paddingRight" value="0"/>
			<mx:SetStyle target="{myVBox}" name="paddingTop" value="0"/>
			<mx:SetStyle target="{myVBox}" name="paddingBottom" value="0"/>
			
			<mx:SetStyle target="{myVBox}" name="borderColor" value="#cccccc"/>
			<mx:SetStyle target="{myVBox}" name="backgroundColor" value="#f8f8f8"/>
            <mx:RemoveChild target="{relationsdropdown}"/>
        </mx:State>
	</mx:states>
	
	
	<mx:VBox id="myVBox" verticalGap="0" paddingBottom="2" paddingTop="2" paddingLeft="2" paddingRight="2"  backgroundColor="#ffffff" backgroundAlpha=".8" borderStyle="solid" verticalAlign="middle" borderColor="#cccccc" > <!-- borderThickness="1" -->
		<mx:Label id="addRelation" text="Show Relation:" styleName="chainItemStyle"  /> 
		<!--  itemRenderer="mx.controls.Label" styleName="myToggleButtonStyle" -->
			
		<combo:MatchComboBox id="relationsdropdown" prompt="" rowCount="10" styleName="myToggleButtonStyle" dataProvider="{data.previousItem.properties}" matchFirstPosition="false" matchCaseSensitive="false" change="changeHandler(event)" width="200" dropdownWidth="250">
			<combo:itemRenderer>  
				<mx:Component>  
					<mx:Label text="(#{data.objectClass.numberOfObjectInstances}) {data.label}" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" />  
				</mx:Component>  
			</combo:itemRenderer>
		</combo:MatchComboBox>
		<!-- <mx:ComboBox id="relationsdropdown" prompt="- select -" rowCount="10" styleName="myToggleButtonStyle" height="18" change="changeHandler(event)" width="200" dropdownWidth="250" dataProvider="{data.previousItem.properties}" >
			<mx:itemRenderer>  
				<mx:Component>  
					<mx:Label text="(#{data.objectClass.numberOfObjectInstances}) {data.label}" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" />  
				</mx:Component>  
			</mx:itemRenderer> 
		</mx:ComboBox>-->
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			//  {data.label} ({data.objectClass.numberOfObjectInstances}
			import flash.events.MouseEvent;
			import flash.filters.GlowFilter;
			import mx.collections.ArrayCollection;
			import mx.controls.Button;
			import mx.effects.Glow;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import mx.core.Application;
			import mx.effects.easing.Bounce;
			import org.flashdevelop.utils.FlashConnect;

			
			public function setup():void {
				
				//app().addEventListener(MouseEvent.CLICK, closeDropDown);
				
				FlashConnect.trace("new RelationView, " + this.id);
			}
			
			public function closeDropDown(e:MouseEvent):void {
				relationsdropdown.close();
			}
			
			private function app(): Main {
				return Application.application as Main;
			}
			
			private function calcFilters(_hasChanged:Boolean): Array {
				if (_hasChanged) {
					var radius:int = 5;
					var alpha:Number = 1.0;
					return [new GlowFilter(data.highlightColor, alpha, radius, radius, 15, 2)];
				}else {
					return null;
				}
			}
			
			public function getLabel(_data:RelationItem):String {
				return "test";
			}
			
			private function getColor(currentItem:Item, item: Item): int {
				if (currentItem == item) {
					return 0x000000;
				}else {
					return 0x3f3f3f;;
				}
			}
			
			private function changeHandler(event:Event):void {
				if (relationsdropdown.selectedItem != null) {
					data.setProperty(relationsdropdown.selectedItem);
					
					//to erase filtering effects!
					data.previousItem.properties.filterFunction = null;
					data.previousItem.properties.refresh();
					
					currentState = 'FixedRelation'; 
					//trace("---add listItem");
					data.previousItem.addListItem(data);
				}
			}
				
			
		]]>
	</mx:Script>				
</mx:Canvas>